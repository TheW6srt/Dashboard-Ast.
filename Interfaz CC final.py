#!/usr/bin/env python
# coding: utf-8

# In[33]:


#from IPython.core.magic import register_cell_magic

#@register_cell_magic
#def writefile(line, cell):
    #with open(line, 'w', encoding='utf-8') as f:
        #f.write(cell)


# In[35]:


#get_ipython().run_cell_magic('writefile', 'app.py', 'import streamlit as st\nimport pandas as pd\nimport numpy as np\nimport plotly.io as pio\nimport plotly.graph_objects as go\nimport plotly.express as px\nimport re\nfrom itertools import combinations\nfrom collections import Counter, defaultdict\n\nst.set_page_config(page_title="Club Chelero", layout="wide")\n\npio.renderers.default = \'iframe\'\n\nst.sidebar.header("Carga de Archivos")\narchivo_historicos = st.sidebar.file_uploader("Cargar archivo de hist√≥rico de puntos", type=["xlsx"])\narchivo_skus = st.sidebar.file_uploader("Cargar archivo de compras por SKU", type=["xlsx"])\narchivo_usuarios = st.sidebar.file_uploader("Cargar archivo de datos de usuarios", type=["xlsx"])\narchivo_utilidad = st.sidebar.file_uploader("Cargar archivo de margen por producto", type=["xlsx"])\narchivo_tiendas = st.sidebar.file_uploader("Cargar archivo de precios por tienda", type=["xlsx"])\n\n@st.cache_data\ndef load_data_manual(archivo_historicos, archivo_skus, archivo_usuarios, archivo_utilidad, archivo_tiendas):\n    if archivo_historicos and archivo_skus and archivo_usuarios and archivo_utilidad and archivo_tiendas:\n        df_historicos = pd.read_excel(archivo_historicos)\n        df_skus = pd.read_excel(archivo_skus)\n        df_usuarios = pd.read_excel(archivo_usuarios)\n        df_utilidad = pd.read_excel(archivo_utilidad)\n        df_tiendas = pd.read_excel(archivo_tiendas)\n        return df_historicos, df_skus, df_usuarios, df_utilidad, df_tiendas\n    else:\n        return None, None, None, None, None\n\ndf_historicos, df_skus, df_usuarios, df_utilidad, df_tiendas = load_data_manual(\n    archivo_historicos, archivo_skus, archivo_usuarios, archivo_utilidad, archivo_tiendas)\n\nif all(df is not None for df in [df_historicos, df_skus, df_usuarios, df_utilidad, df_tiendas]):\n\n    df_historicos.rename(columns={\'N¬∫ cuenta\': \'id_cliente\'}, inplace=True)\n    df_skus.rename(columns={\'No. Cuenta Miembro\': \'id_cliente\'}, inplace=True)\n    df_usuarios.rename(columns={\'tel_usuario\': \'id_cliente\'}, inplace=True)\n\n    dicc_grupo_etario = df_usuarios.groupby(\'Grupo Etario\')[\'id_cliente\'].apply(list).to_dict()\n    dicc_id_to_grupo = {\n        id_usuario: grupo for grupo, ids in dicc_grupo_etario.items() for id_usuario in ids\n    }\n\n    df_utilidad = df_utilidad.rename(columns={\'ID\': \'SKU\'})\n    df_utilidad[\'%\'] = df_utilidad.apply(\n        lambda row: row[\'Utilidad\'] / row[\'Venta\'] if row[\'Venta\'] != 0 else 0,\n        axis=1\n    )\n    dicc_sku_info = df_utilidad.set_index(\'SKU\')[[\n        \'Categoria\', \'Sub Categoria\', \'Familia\', \'Descripci√≥n\', \'%\'\n    ]].to_dict(orient=\'index\')\n\n    dict_tiendas_precio = dict(zip(df_tiendas[\'Store\'], df_tiendas[\'Price Group Code\']))\n\n    def construir_df_base(df_historicos, df_skus, df_utilidad):\n        df_h = df_historicos.copy()\n        df_s = df_skus.copy()\n\n        df_s[\'Cantidad\'] = df_s[\'Cantidad\'].abs()\n        df_s[\'Valor Bruto\'] = df_s[\'Valor Bruto\'].abs()\n\n        df_h[\'Fecha\'] = pd.to_datetime(df_h[\'Fecha\'])\n        df_s[\'Fecha\'] = pd.to_datetime(df_s[\'Fecha\'])\n\n        df_h[\'clave\'] = (\n            df_h[\'Fecha\'].astype(str) + "_" +\n            df_h[\'No. Tienda\'].astype(str) + "_" +\n            df_h[\'N¬∫ Transacci√≥n\'].astype(str)\n        )\n\n        df_s[\'clave\'] = (\n            df_s[\'Fecha\'].astype(str) + "_" +\n            df_s[\'No. Tienda\'].astype(str) + "_" +\n            df_s[\'N¬∫ Transacci√≥n\'].astype(str)\n        )\n\n        columnas_historico = df_h.drop(columns=[\'No. Contacto\', \'No. Tarjeta\'])\n\n        columnas_skus = df_s[[\n            \'clave\', \'No. Producto\', \'Descripci√≥n\', \'Cantidad\',\n            \'Valor Bruto\', \'Importe Descuento\',\n            \'C√≥digo Categor√≠a Producto\', \'C√≥d. grupo producto\'\n        ]]\n\n        df_base = columnas_historico.merge(columnas_skus, on=\'clave\', how=\'inner\')\n        df_base = df_base.rename(columns={\'No. Producto\': \'SKU\'})\n\n        df_base[\'Grupo Etario\'] = df_base[\'id_cliente\'].map(dicc_id_to_grupo)\n        df_base[\'Categoria\'] = df_base[\'SKU\'].map(lambda x: dicc_sku_info.get(x, {}).get(\'Categoria\'))\n        df_base[\'Sub Categoria\'] = df_base[\'SKU\'].map(lambda x: dicc_sku_info.get(x, {}).get(\'Sub Categoria\'))\n        df_base[\'Familia\'] = df_base[\'SKU\'].map(lambda x: dicc_sku_info.get(x, {}).get(\'Familia\'))\n        df_base[\'Descripci√≥n Detallada\'] = df_base[\'SKU\'].map(lambda x: dicc_sku_info.get(x, {}).get(\'Descripci√≥n\'))\n        df_base[\'% Utilidad\'] = df_base[\'SKU\'].map(lambda x: dicc_sku_info.get(x, {}).get(\'%\'))\n        df_base[\'Grupo Precio\'] = df_base[\'No. Tienda\'].map(dict_tiendas_precio)\n        df_base[\'Grupo Precio\'] = df_base[\'Grupo Precio\'].fillna(\'DESCONOCIDO\')\n\n        return df_base\n\n    df_base = construir_df_base(df_historicos, df_skus, df_utilidad)\n\n    def calcular_kpis(df):\n        \n        total_ventas = df[\'Valor Bruto\'].sum()\n        clientes_unicos = df[\'id_cliente\'].nunique()\n        productos_vendidos = df[\'Cantidad\'].sum()\n        return total_ventas, clientes_unicos, productos_vendidos\n\n    def mostrar_kpis(df_base):\n        \n        total_ventas, clientes_unicos, productos_vendidos = calcular_kpis(df_base)\n    \n        # --- Periodo de an√°lisis ---\n        fecha_min = pd.to_datetime(df_base[\'Fecha\']).min().date()\n        fecha_max = pd.to_datetime(df_base[\'Fecha\']).max().date()\n        periodo_analizado = f"{fecha_min} a {fecha_max}"\n    \n        # --- Visualizaci√≥n en Streamlit ---\n        col_titulo, col_periodo = st.columns([2, 1])\n        with col_titulo:\n            st.subheader("üìà Visi√≥n General")\n        with col_periodo:\n            st.markdown(f"**üóìÔ∏è Periodo Analizado:**  \\n{periodo_analizado}")\n    \n        col1, col2, col3 = st.columns(3)\n        col1.metric("üíµ Total Ventas", f"${total_ventas:,.0f}")\n        col2.metric("üë• Clientes √önicos", f"{clientes_unicos:,}")\n        col3.metric("üì¶ Productos Vendidos", f"{int(productos_vendidos):,}")\n\n    mostrar_kpis(df_base)\n\n    \n    def mostrar_comparativa_ventas(df_base):\n        st.subheader("Ventas por Tienda")\n    \n        top_n = st.selectbox("¬øCu√°ntas tiendas deseas visualizar?", options=[5, 10, 15, 20, 30, 50], index=1)\n    \n        resumen_tienda = (\n            df_base.groupby(\'No. Tienda\')\n            .agg(Total_Ventas=(\'Valor Bruto\', \'sum\'))\n            .reset_index()\n            .sort_values(\'Total_Ventas\', ascending=False)\n            .head(top_n)\n        )\n    \n        fig = px.bar(\n            resumen_tienda,\n            x=\'No. Tienda\',\n            y=\'Total_Ventas\',\n            title=f"Top {top_n} Tiendas por Ventas",\n            labels={\'No. Tienda\': \'Tienda\', \'Total_Ventas\': \'Ventas ($)\'},\n            text_auto=\'.2s\'\n        )\n        fig.update_layout(xaxis_title="", yaxis_title="Ventas ($)")\n        st.plotly_chart(fig, use_container_width=True)\n    \n    mostrar_comparativa_ventas(df_base)\n    \n    def mostrar_ventas_por_grupo_precio(df_base):\n        st.subheader("Ventas por Grupo Precio")\n    \n        resumen_precio = (\n            df_base.groupby(\'Grupo Precio\')\n            .agg(Ventas_Totales=(\'Valor Bruto\', \'sum\'))\n            .reset_index()\n            .sort_values(\'Ventas_Totales\', ascending=False)\n        )\n    \n        fig = px.bar(\n            resumen_precio,\n            x=\'Grupo Precio\',\n            y=\'Ventas_Totales\',\n            title=\'Comparativa de Ventas por Grupo Precio\',\n            labels={\'Grupo Precio\': \'Grupo Precio\', \'Ventas_Totales\': \'Ventas ($)\'},\n            text_auto=\'.2s\'\n        )\n        fig.update_layout(xaxis_title="", yaxis_title="Ventas ($)")\n        st.plotly_chart(fig, use_container_width=True)\n    \n    mostrar_ventas_por_grupo_precio(df_base)\n    \n    def resumen_mensual_ventas_transacciones(df_base):\n            # Asegurar que la columna Fecha est√© en formato datetime\n            df_base = df_base.copy()\n            df_base[\'Fecha\'] = pd.to_datetime(df_base[\'Fecha\'])\n        \n            # Crear columnas de a√±o y mes\n            df_base[\'A√±o\'] = df_base[\'Fecha\'].dt.year\n            df_base[\'Mes\'] = df_base[\'Fecha\'].dt.month\n        \n            # Agrupar por a√±o y mes\n            resumen = (\n                df_base.groupby([\'A√±o\', \'Mes\'])\n                .agg(\n                    Ventas_Totales=(\'Valor Bruto\', \'sum\'),\n                    Transacciones_Totales=(\'N¬∫ Transacci√≥n\', pd.Series.nunique)\n                )\n                .reset_index()\n            )\n        \n            promedio_ventas = resumen[\'Ventas_Totales\'].mean()\n            promedio_transacciones = resumen[\'Transacciones_Totales\'].mean()\n        \n            return resumen, promedio_ventas, promedio_transacciones    \n    \n    def ticket_promedio_mensual(df_base):\n            # Asegurarse de que la columna de fecha sea datetime\n            df_base[\'Fecha\'] = pd.to_datetime(df_base[\'Fecha\'])\n        \n            # Consolidar el valor del ticket por transacci√≥n (suma del valor bruto)\n            tickets = df_base.groupby([\'N¬∫ Transacci√≥n\', \'Fecha\'], as_index=False)[\'Valor Bruto\'].sum()\n        \n            tickets[\'A√±o\'] = tickets[\'Fecha\'].dt.year\n            tickets[\'Mes\'] = tickets[\'Fecha\'].dt.month\n        \n            #promedio por mes\n            tickets_promedio = (\n                tickets.groupby([\'A√±o\', \'Mes\'])[\'Valor Bruto\']\n                .mean()\n                .reset_index(name=\'Ticket Promedio\')\n            )\n        \n            return tickets_promedio\n    \n    def mostrar_evolucion_mensual(df_base):\n            st.subheader("Evoluci√≥n Mensual")\n        \n            # 1. Ventas y Transacciones Totales\n            resumen, promedio_ventas, promedio_transacciones = resumen_mensual_ventas_transacciones(df_base)\n        \n            resumen[\'Periodo\'] = resumen[\'A√±o\'].astype(str) + "-" + resumen[\'Mes\'].astype(str).str.zfill(2)\n        \n            col1, col2 = st.columns(2)\n            col1.metric("Promedio Ventas Mensuales", f"${promedio_ventas:,.0f}")\n            col2.metric("Promedio Transacciones Mensuales", f"{promedio_transacciones:,.0f}")\n        \n            # Gr√°fica de ventas con etiquetas\n            # Gr√°fica de ventas con etiquetas y formato\n            fig_ventas = px.line(\n                resumen,\n                x=\'Periodo\',\n                y=\'Ventas_Totales\',\n                title=\'üìà Evoluci√≥n Mensual de Ventas\',\n                markers=True,\n                labels={\'Ventas_Totales\': \'Ventas Totales\'},\n                text=\'Ventas_Totales\'\n            )\n            fig_ventas.update_traces(textposition=\'top center\', texttemplate=\'$%{y:,.1s}\')\n            fig_ventas.update_yaxes(tickformat=\'$,.1s\')  # Formato tipo $1.2M\n            st.plotly_chart(fig_ventas, use_container_width=True)\n            \n            # Gr√°fica de transacciones con etiquetas y formato\n            fig_transacciones = px.line(\n                resumen,\n                x=\'Periodo\',\n                y=\'Transacciones_Totales\',\n                title=\'üîÅ Evoluci√≥n Mensual de Transacciones\',\n                markers=True,\n                labels={\'Transacciones_Totales\': \'Transacciones\'},\n                text=\'Transacciones_Totales\'\n            )\n            fig_transacciones.update_traces(textposition=\'top center\', texttemplate=\'%{y:,}\')\n            fig_transacciones.update_yaxes(tickformat=\',\')  # Separador de miles\n            st.plotly_chart(fig_transacciones, use_container_width=True)\n            \n            # Gr√°fica de ticket promedio con etiquetas y formato\n            tickets_promedio = ticket_promedio_mensual(df_base)\n            tickets_promedio[\'Periodo\'] = tickets_promedio[\'A√±o\'].astype(str) + "-" + tickets_promedio[\'Mes\'].astype(str).str.zfill(2)\n            \n            fig_ticket = px.line(\n                tickets_promedio,\n                x=\'Periodo\',\n                y=\'Ticket Promedio\',\n                title=\'üßæ Evoluci√≥n del Ticket Promedio Mensual\',\n                markers=True,\n                text=\'Ticket Promedio\'\n            )\n            fig_ticket.update_traces(textposition=\'top center\', texttemplate=\'$%{y:,.0f}\')\n            fig_ticket.update_yaxes(tickformat=\'$,.0f\')  # Formato monetario est√°ndar\n            st.plotly_chart(fig_ticket, use_container_width=True)\n    \n    \n    mostrar_evolucion_mensual(df_base)\n    \n    def mostrar_productos_mas_vendidos(df_base):\n            st.subheader("Productos M√°s Vendidos")\n        \n            # Agrupar por producto\n            resumen_prod = (\n                df_base.groupby([\'SKU\', \'Descripci√≥n\'], as_index=False)\n                .agg(\n                    Ventas_Totales=(\'Valor Bruto\', \'sum\'),\n                    Unidades_Totales=(\'Cantidad\', \'sum\')\n                )\n                .sort_values(by=\'Ventas_Totales\', ascending=False)\n            )\n        \n            # Selector: top N\n            top_n = st.selectbox("Selecciona cu√°ntos productos mostrar:", [5, 10, 15, 20], index=1)\n        \n            # Selector: tipo de m√©trica\n            tipo_metrica = st.radio("Ordenar por:", [\'Ventas Totales\', \'Unidades Totales\'], horizontal=True)\n        \n            if tipo_metrica == \'Ventas Totales\':\n                resumen_top = resumen_prod.nlargest(top_n, \'Ventas_Totales\')\n                y_col = \'Ventas_Totales\'\n                title = f"üí∞ Top {top_n} Productos por Ventas"\n            else:\n                resumen_top = resumen_prod.nlargest(top_n, \'Unidades_Totales\')\n                y_col = \'Unidades_Totales\'\n                title = f"üì¶ Top {top_n} Productos por Unidades Vendidas"\n        \n            fig = px.bar(\n                resumen_top,\n                x=\'Descripci√≥n\',\n                y=y_col,\n                text_auto=\'.2s\',\n                title=title,\n                labels={y_col: tipo_metrica},\n            )\n            fig.update_layout(xaxis_tickangle=-45, xaxis_title="", yaxis_title=tipo_metrica)\n            st.plotly_chart(fig, use_container_width=True)\n        \n            # Mostrar tabla completa opcionalmente\n            with st.expander("üîç Ver tabla completa"):\n                st.dataframe(resumen_prod, use_container_width=True)\n        \n    mostrar_productos_mas_vendidos(df_base)\n    \n    def analizar_segmentos_por_edad(df_base):\n            resumen = df_base.groupby(\'Grupo Etario\').agg(\n                #Total_Clientes=(\'id_cliente\', \'nunique\'),\n                Total_Transacciones=(\'N¬∫ Transacci√≥n\', \'nunique\'),\n                Total_Puntos=(\'Puntos\', \'sum\'),\n                Total_Cantidad_Productos=(\'Cantidad\', \'sum\'),\n                Valor_Total_Compras=(\'Valor Bruto\', \'sum\')\n            ).reset_index().sort_values(by=\'Valor_Total_Compras\', ascending=True)\n            \n            return resumen\n    \n    def productos_top_por_segmento(df_base, top_n=5):\n            productos_top = (\n                df_base.groupby([\'Grupo Etario\', \'Descripci√≥n\'])\n                .agg(Ventas_Totales=(\'Valor Bruto\', \'sum\'))\n                .reset_index()\n            )\n            \n            top_productos_segmento = productos_top.sort_values([\'Grupo Etario\',\'Ventas_Totales\'], ascending=[True, False])\n            \n            # Obtener los top_n productos por segmento\n            top_productos_segmento = top_productos_segmento.groupby(\'Grupo Etario\').head(top_n)\n            \n            return top_productos_segmento\n    \n    def mostrar_analisis_por_segmento(df_base):\n            st.header("An√°lisis por Segmento de Edad")\n        \n            # 1. Resumen general por grupo etario\n            st.subheader("üìä Resumen General por Grupo Etario")\n            segmentos = analizar_segmentos_por_edad(df_base)\n            st.dataframe(segmentos, use_container_width=True)\n        \n            fig = px.bar(\n                segmentos,\n                x=\'Grupo Etario\',\n                y=\'Valor_Total_Compras\',\n                title=\'üíµ Valor Total de Compras por Grupo Etario\',\n                labels={\'Valor_Total_Compras\': \'Valor Total ($)\'},\n                text_auto=\'.2s\'\n            )\n            st.plotly_chart(fig, use_container_width=True)\n    \n    mostrar_analisis_por_segmento(df_base)\n    \n    def mostrar_top_productos_por_segmento(df_base):\n            st.subheader("Top Productos por Grupo Etario (Selecci√≥n Individual)")\n        \n            grupos = df_base[\'Grupo Etario\'].dropna().unique()\n            grupos_ordenados = sorted(grupos)\n        \n            grupo_seleccionado = st.selectbox("Selecciona un grupo etario:", grupos_ordenados)\n        \n            top_n = st.slider("¬øCu√°ntos productos mostrar?", min_value=3, max_value=15, value=5)\n        \n            top_productos_sg = productos_top_por_segmento(df_base, top_n=top_n)\n        \n            productos_filtrados = top_productos_sg[top_productos_sg[\'Grupo Etario\'] == grupo_seleccionado]\n        \n            if not productos_filtrados.empty:\n                fig = px.bar(\n                    productos_filtrados,\n                    x=\'Descripci√≥n\',\n                    y=\'Ventas_Totales\',\n                    title=f"ü•á Top {top_n} Productos - {grupo_seleccionado}",\n                    labels={\'Ventas_Totales\': \'Ventas Totales ($)\'},\n                    text_auto=\'.2s\'\n                )\n                fig.update_layout(xaxis_tickangle=-45, xaxis_title="", yaxis_title="Ventas Totales")\n                st.plotly_chart(fig, use_container_width=True)\n        \n                with st.expander("üîç Ver todos los productos de este grupo etario"):\n                    todos_los_productos = (\n                        df_base[df_base[\'Grupo Etario\'] == grupo_seleccionado]\n                        .groupby(\'Descripci√≥n\', as_index=False)\n                        .agg(Ventas_Totales=(\'Valor Bruto\', \'sum\'))\n                        .sort_values(by=\'Ventas_Totales\', ascending=False)\n                    )\n                    st.dataframe(todos_los_productos, use_container_width=True)\n            else:\n                st.warning("No hay datos disponibles para este grupo etario.")\n    \n    mostrar_top_productos_por_segmento(df_base)\n    \n    def detectar_cross_selling_detallado_flexible_streamlit(df_base):\n        st.subheader("üîÅ An√°lisis de Venta en Conjunto (Cross Selling)")\n    \n        # Obtener opciones √∫nicas\n        grupo_etario_opciones = [\'Todos\'] + sorted(df_base[\'Grupo Etario\'].dropna().unique())\n        categoria_opciones = [\'Todas\'] + sorted(df_base[\'Categoria\'].dropna().unique())\n        fecha_min = pd.to_datetime(df_base[\'Fecha\'].min())\n        fecha_max = pd.to_datetime(df_base[\'Fecha\'].max())\n    \n        # --- Filtros en el cuerpo principal ---\n        col1, col2, col3 = st.columns(3)\n        with col1:\n            grupo_etario = st.selectbox("Grupo Etario", grupo_etario_opciones)\n        with col2:\n            categoria_focal = st.selectbox("Categor√≠a focal", categoria_opciones)\n        with col3:\n            min_apariciones = st.slider("Frecuencia m√≠nima", 2, 100, 10)\n    \n        rango_fechas = st.date_input("Rango de fechas a analizar", [fecha_min, fecha_max])\n    \n        ejecutar = st.button("üîé Ejecutar an√°lisis")\n    \n        if ejecutar:\n            st.info("Procesando combinaciones...")\n    \n            # Filtro\n            df = df_base.copy()\n            if grupo_etario != \'Todos\':\n                df = df[df[\'Grupo Etario\'] == grupo_etario]\n            if categoria_focal != \'Todas\':\n                categoria_focal = categoria_focal.upper()\n            if rango_fechas:\n                f1, f2 = pd.to_datetime(rango_fechas[0]), pd.to_datetime(rango_fechas[1])\n                df = df[(df[\'Fecha\'] >= f1) & (df[\'Fecha\'] <= f2)]\n    \n            df = df[df[\'% Utilidad\'] > 0]\n    \n            # Agrupar por ticket\n            productos_por_ticket = df.groupby(\'clave\')[[\'SKU\', \'Categoria\', \'Descripci√≥n\', \'% Utilidad\']].apply(\n                lambda x: x.drop_duplicates().to_dict(\'records\')\n            ).reset_index(name=\'Productos\')\n    \n            combinaciones = []\n            for _, row in productos_por_ticket.iterrows():\n                productos = row[\'Productos\']\n    \n                if categoria_focal != \'Todas\':\n                    focales = [p for p in productos if p[\'Categoria\'] == categoria_focal]\n                    otros = [p for p in productos if p[\'Categoria\'] != categoria_focal]\n                    pares = [(f, o) for f in focales for o in otros]\n                else:\n                    pares = list(combinations(productos, 2))\n    \n                for p1, p2 in pares:\n                    key = tuple(sorted([p1[\'SKU\'], p2[\'SKU\']]))\n                    combinaciones.append((key, p1, p2))\n    \n            conteo = Counter([c[0] for c in combinaciones])\n    \n            combinaciones_filtradas = [\n                (sku_pair, p1, p2, freq)\n                for (sku_pair, p1, p2), freq in zip(combinaciones, [conteo[c[0]] for c in combinaciones])\n                if freq >= min_apariciones\n            ]\n    \n            registros = []\n            ya_vistos = set()\n            for (sku1, sku2), p1, p2, freq in combinaciones_filtradas:\n                key = tuple(sorted([sku1, sku2]))\n                if key in ya_vistos:\n                    continue\n                ya_vistos.add(key)\n    \n                registros.append({\n                    \'SKU 1\': p1[\'SKU\'],\n                    \'Categor√≠a 1\': p1[\'Categoria\'],\n                    \'Descripci√≥n 1\': p1[\'Descripci√≥n\'],\n                    \'Utilidad 1\': p1[\'% Utilidad\'],\n                    \'SKU 2\': p2[\'SKU\'],\n                    \'Categor√≠a 2\': p2[\'Categoria\'],\n                    \'Descripci√≥n 2\': p2[\'Descripci√≥n\'],\n                    \'Utilidad 2\': p2[\'% Utilidad\'],\n                    \'Frecuencia\': freq,\n                    \'Utilidad Promedio Combo\': (p1[\'% Utilidad\'] + p2[\'% Utilidad\']) / 2\n                })\n    \n            if not registros:\n                st.warning("Combinaciones no encontradas")\n            else:\n                df_resultado = pd.DataFrame(registros)\n                df_resultado = df_resultado.sort_values(by=\'Frecuencia\', ascending=False).reset_index(drop=True)\n                st.success(f"{len(df_resultado)} combinaciones detectadas.")\n                st.dataframe(df_resultado)\n\n    detectar_cross_selling_detallado_flexible_streamlit(df_base)\n\nelse:\n    st.warning("Por favor carga los cinco archivos requeridos para visualizar el dashboard.")\n')


# In[37]:


get_ipython().system('streamlit run app.py')


# In[38]:


get_ipython().run_cell_magic('writefile', 'requirements.txt', 'streamlit\npandas\nnumpy\nopenpyxl\nplotly\n')


# In[40]:


get_ipython().system('ls')


# In[44]:


get_ipython().system('cat requirements.txt')


# In[ ]:




